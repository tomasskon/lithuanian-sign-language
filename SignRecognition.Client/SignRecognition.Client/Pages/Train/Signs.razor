@page "/train/signs"

@attribute [Authorize]

@using MudBlazor
@using SignRecognition.Client.HttpClients.Interface
@using AutoMapper
@using SignRecognition.Client.Services
@using SignRecognition.Client.ViewModels.Sign

@inject ISignHttpClient SignHttpClient
@inject ITrainingHttpClient TrainingHttpClient;
@inject AuthStateProviderService AuthenticationStateProvider;
@inject IMapper Mapper;

@if (_trainableSigns is not null && _userSubmittedSigns is not null)
{
    <MudGrid Justify="Justify.Center" Class="pt-lg-12">
        <MudItem xs="6">
            <MudGrid Justify="Justify.FlexStart">
                @foreach (var trainableSing in _trainableSigns)
                {
                    <MudItem xs="4">
                        <MudCard>
                            <MudCardHeader>
                                <MudText Typo="Typo.h6">@trainableSing.SignName.ToUpper()</MudText>
                            </MudCardHeader>
                            <MudCardContent>
                                <BlazoredVideo
                                    class="w-100"
                                    style="max-width:400px; border-radius: 5px"
                                    controls="controls">
                                    <source src="@trainableSing.SignVideoUrl" type="video/mp4"/>
                                </BlazoredVideo>
                            </MudCardContent>
                            <MudCardActions>
                                @if (!_userSubmittedSigns.Contains(trainableSing.Id))
                                {
                                    <MudButton Href="@($@"/train/signs/{trainableSing.Id}/submit")" Variant="Variant.Text" Color="Color.Primary" EndIcon="@Icons.Material.Filled.Upload">Pateikti duomenis</MudButton>
                                }
                                else
                                {
                                    <MudText Color="Color.Success">DUOMENYS PATEIKTI</MudText>
                                }
                                <MudSpacer/>
                                <MudIconButton Color="Color.Primary" Icon="@Icons.Material.Filled.Download" aria-label="home"></MudIconButton>
                                <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.Delete" aria-label="home"></MudIconButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        </MudItem>
    </MudGrid>
}

@code {
    private IEnumerable<SignViewModel> _trainableSigns;
    private HashSet<Guid> _userSubmittedSigns;

    protected override async Task OnInitializedAsync()
    {
        var signsTask = SignHttpClient.GetAllSignsAsync();
        var userSignsTask = TrainingHttpClient.GetUserSubmittedTrainingDataIdsAsync(AuthenticationStateProvider.CurentUser.Id);

        await Task.WhenAll(signsTask, userSignsTask);

        _trainableSigns = Mapper.Map<IEnumerable<SignViewModel>>(signsTask.Result);
        _userSubmittedSigns = userSignsTask.Result.ToHashSet();
    }

}

