@page "/login"

@attribute [AllowAnonymous]

@using MudBlazor
@using SignRecognition.Client.HttpClients.Interface
@using SignRecognition.Client.Services
@using SignRecognition.Client.ViewModels.Authentication
@using SignRecognition.Contract.Authentication

@inject IAuthenticationHttpClient AuthenticationHttpClient
@inject AuthStateProviderService AuthStateProvider
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<MudGrid Justify="Justify.Center" Class="pt-lg-12">
    <MudItem sm="3">
        <EditForm Model="@_loginViewModel" OnValidSubmit="OnValidUserLogin">
            <DataAnnotationsValidator/>
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Email" Class="mt-3"
                                  @bind-Value="_loginViewModel.Email" For="@(() => _loginViewModel.Email)"/>
                    <MudTextField Label="Password" Class="mt-3"
                                  @bind-Value="_loginViewModel.Password" For="@(() => _loginViewModel.Password)" InputType="InputType.Password"/>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Outlined" Color="Color.Primary" Class="ml-auto">Prisijungti</MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
        @if (_loginFailed)
        {
            <MudAlert Class="mt-5" Severity="Severity.Error">@_loginFailedMessage</MudAlert>
        }
    </MudItem>
    <MudItem sm="3">
        <EditForm Model="@_registrationViewModel" OnValidSubmit="OnValidUserRegister">
            <DataAnnotationsValidator/>
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="First name"
                                  @bind-Value="_registrationViewModel.FirstName" For="@(() => _registrationViewModel.FirstName)"/>
                    <MudTextField Label="Last Name" Class="mt-3"
                                  @bind-Value="_registrationViewModel.LastName" For="@(() => _registrationViewModel.LastName)"/>
                    <MudTextField Label="Email" Class="mt-3"
                                  @bind-Value="_registrationViewModel.Email" For="@(() => _registrationViewModel.Email)" InputType="InputType.Email"/>
                    <MudTextField Label="Password" Class="mt-3"
                                  @bind-Value="_registrationViewModel.Password" For="@(() => _registrationViewModel.Password)" InputType="InputType.Password"/>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Outlined" Color="Color.Primary" Class="ml-auto">Registruotis</MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
        @if (_registrationFailed)
        {
            <MudAlert Class="mt-5" Severity="Severity.Error">@_registrationFailedMessage</MudAlert>
        }
    </MudItem>
</MudGrid>

@code {
    private readonly UserLoginViewModel _loginViewModel = new();
    private readonly UserRegistrationViewModel _registrationViewModel = new();

    private bool _loginFailed = false;
    private string _loginFailedMessage = "";

    private bool _registrationFailed = false;
    private string _registrationFailedMessage = "";

    private async Task OnValidUserRegister(EditContext context)
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium };

        var dialog = await DialogService.ShowAsync<TermsAndConditionsDialog>("Sąlygos", options);
        var result = await dialog.Result;

        if (result.Canceled)
            return;

        var response = await AuthenticationHttpClient.RegisterUserAsync(new UserRegisterContract
        {
            FirstName = _registrationViewModel.FirstName,
            LastName = _registrationViewModel.LastName,
            Email = _registrationViewModel.Email,
            Password = _registrationViewModel.Password
        });

        if (response.Item1 != null)
        {
            await AuthStateProvider.LoginAsync(response.Item1);
            StateHasChanged();
            NavigationManager.NavigateTo("/client");
        }
        else
        {
            var error = response.Item2;
            _registrationFailedMessage = error.Error switch
            {
                "UserEmailAlreadyUsedException" => "Vartotojo elektroninis paštas jau užimtas",
                _ => "Įvyko klaida"
                };
            _registrationFailed = true;
        }
    }

    private async Task OnValidUserLogin(EditContext context)
    {
        var response = await AuthenticationHttpClient.LoginUserAsync(new UserLoginContract()
        {
            EmailAddress = _loginViewModel.Email,
            Password = _loginViewModel.Password
        });

        if (response.Item1 != null)
        {
            await AuthStateProvider.LoginAsync(response.Item1);
            StateHasChanged();
            NavigationManager.NavigateTo("/client");
        }
        else
        {
            var error = response.Item2;
            _loginFailedMessage = error.Error switch
            {
                "UserNotFoundException" => "Vartotojo prisijungimo duomenys neteisingi",
                "InvalidPasswordException" => "Vartotojo prisijungimo duomenys neteisingi",
                "BadUserException" => "Vartotojo duomenys neteisingi",
                _ => "Įvyko klaida"
                };
            _loginFailed = true;
        }
    }

}